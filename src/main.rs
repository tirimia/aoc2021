use aoc2021::{
    day1::day_1,
    day2::day_2,
    day3::day_3,
};

fn main() {
    let args = std::env::args().collect::<Vec<String>>();
    let problem = args.get(1).map(|s| s.as_str()).unwrap_or("None");
    let result = match problem {
        "day1" => day_1(),
        "day2" => day_2(),
        "day3" => day_3(),
        // "day3b" => day3b(),
        // "day4a" => day4a(),
        // "day4b" => day4b(),
        // "day5a" => day5a(),
        // "day5b" => day5b(),
        // "day6a" => day6a(),
        // "day6b" => day6b(),
        // "day7a" => day7a(),
        // "day7b" => day7b(),
        // "day8a" => day8a(),
        // "day8b" => day8b(),
        // "day9a" => day9a(),
        // "day9b" => day9b(),
        // "day10a" => day10a(),
        // "day10b" => day10b(),
        // "day11a" => day11a(),
        // "day11b" => day11b(),
        // "day12a" => day12a(),
        // "day12b" => day12b(),
        // "day13a" => day13a(),
        // "day13b" => day13b(),
        // "day14a" => day14a(),
        // "day14b" => day14b(),
        // "day15a" => day15a(),
        // "day15b" => day15b(),
        // "day16a" => day16a(),
        // "day16b" => day16b(),
        // "day17a" => day17a(),
        // "day17b" => day17b(),
        // "day18a" => day18a(),
        // "day18b" => day18b(),
        // "day19a" => day19a(),
        // "day19b" => day19b(),
        // "day20a" => day20a(),
        // "day20b" => day20b(),
        // "day21a" => day21a(),
        // "day21b" => day21b(),
        // "day22a" => day22a(),
        // "day22b" => day22b(),
        // "day23a" => day23a(),
        // "day23b" => day23b(),
        // "day24a" => day24a(),
        // "day24b" => day24b(),
        // "day25a" => day25a(),
        _ => "We haven't solved that yet".to_string(),
    };
    println!("{}", result);
}
